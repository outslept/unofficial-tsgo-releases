name: Build and Release tsgo Nightly from Submodule

on:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch: {}

permissions:
  contents: write

concurrency:
  group: tsgo-nightly
  cancel-in-progress: true

env:
  TSGO_SRC_PATH: tsgo_submodule

jobs:
  determine_release_vars:
    name: Determine Release Variables from Submodule
    runs-on: ubuntu-latest
    outputs:
      tag_name: ${{ steps.vars.outputs.tag_name }}
      release_name: ${{ steps.vars.outputs.release_name }}
      tsgo_commit_sha: ${{ steps.vars.outputs.tsgo_commit_sha }}
      tsgo_commit_sha_short: ${{ steps.vars.outputs.tsgo_commit_sha_short }}
      tsgo_commit_date: ${{ steps.vars.outputs.tsgo_commit_date }}
      changed: ${{ steps.update.outputs.changed }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: 'recursive'
          fetch-depth: 1

      - name: Update submodule to latest main
        id: update
        run: |
          git submodule update --init --recursive --depth=1

          CURRENT=$(git -C "${{ env.TSGO_SRC_PATH }}" rev-parse HEAD || echo "")
          git -C "${{ env.TSGO_SRC_PATH }}" fetch --depth=1 origin main
          LATEST=$(git -C "${{ env.TSGO_SRC_PATH }}" rev-parse origin/main)

          if [ "$CURRENT" != "$LATEST" ]; then
            git -C "${{ env.TSGO_SRC_PATH }}" checkout --detach "$LATEST"

            git config --global user.name "github-actions[bot]"
            git config --global user.email "github-actions[bot]@users.noreply.github.com"
            git add "${{ env.TSGO_SRC_PATH }}"
            git commit -m "Update tsgo submodule to ${LATEST}"
            git push
            echo "changed=true" >> "$GITHUB_OUTPUT"
          else
            echo "changed=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Get commit information from submodule
        id: commit_info
        working-directory: ${{ env.TSGO_SRC_PATH }}
        run: |
          echo "SHA=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
          echo "SHA_SHORT=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
          echo "DATE=$(git log -1 --format=%cs)" >> $GITHUB_OUTPUT

      - name: Set release variables
        id: vars
        run: |
          TIMESTAMP=$(date -u '+%Y%m%d-%H%M%S')
          echo "tag_name=${{ steps.commit_info.outputs.DATE }}-${TIMESTAMP}" >> $GITHUB_OUTPUT
          echo "release_name=Nightly build ${TIMESTAMP} of TypeScript Go from microsoft/typescript-go@${{ steps.commit_info.outputs.SHA_SHORT }}" >> $GITHUB_OUTPUT
          echo "tsgo_commit_sha=${{ steps.commit_info.outputs.SHA }}" >> $GITHUB_OUTPUT
          echo "tsgo_commit_sha_short=${{ steps.commit_info.outputs.SHA_SHORT }}" >> $GITHUB_OUTPUT
          echo "tsgo_commit_date=${{ steps.commit_info.outputs.DATE }}" >> $GITHUB_OUTPUT

  build_binaries:
    name: Build tsgo Binary (${{ matrix.target_os }}/${{ matrix.target_arch }})
    needs: determine_release_vars
    if: needs.determine_release_vars.outputs.changed == 'true' || github.event_name == 'workflow_dispatch'
    strategy:
      fail-fast: false
      matrix:
        include:
          - target_os: ubuntu-latest
            target_arch: amd64
            go_os: linux
            go_arch: amd64
            asset_name_suffix: linux-amd64
          - target_os: ubuntu-latest
            target_arch: arm64
            go_os: linux
            go_arch: arm64
            asset_name_suffix: linux-arm64
          - target_os: windows-latest
            target_arch: amd64
            go_os: windows
            go_arch: amd64
            asset_name_suffix: windows-amd64
          - target_os: windows-latest
            target_arch: arm64
            go_os: windows
            go_arch: arm64
            asset_name_suffix: windows-arm64
          - target_os: macos-latest
            target_arch: amd64
            go_os: darwin
            go_arch: amd64
            asset_name_suffix: darwin-amd64
          - target_os: macos-latest
            target_arch: arm64
            go_os: darwin
            go_arch: arm64
            asset_name_suffix: darwin-arm64
          - target_os: ubuntu-latest
            target_arch: wasm
            go_os: js
            go_arch: wasm
            asset_name_suffix: js-wasm

    runs-on: ${{ matrix.target_os }}
    env:
      GOOS: ${{ matrix.go_os }}
      GOARCH: ${{ matrix.go_arch }}
      CGO_ENABLED: 0
      GOFLAGS: -trimpath -ldflags=-s -w

    steps:
      - name: Enable long paths on Windows
        if: matrix.go_os == 'windows'
        run: git config --global core.longpaths true

      - uses: actions/checkout@v4
        with:
          submodules: 'recursive'
          fetch-depth: 1

      - name: Ensure submodule at selected commit
        shell: bash
        run: |
          git submodule update --init --recursive --depth=1
          HAVE=$(git -C "${{ env.TSGO_SRC_PATH }}" rev-parse HEAD || echo "")
          WANT="${{ needs.determine_release_vars.outputs.tsgo_commit_sha }}"
          if [ "$HAVE" != "$WANT" ]; then
            git -C "${{ env.TSGO_SRC_PATH }}" fetch --depth=1 origin "$WANT"
            git -C "${{ env.TSGO_SRC_PATH }}" checkout --detach "$WANT"
          fi
          echo "Using tsgo commit: $(git -C "${{ env.TSGO_SRC_PATH }}" rev-parse --short HEAD)"

      - uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          cache: 'npm'
          cache-dependency-path: '${{ env.TSGO_SRC_PATH }}/package-lock.json'

      - name: Install Rust target (linux/arm64)
        if: matrix.go_os == 'linux' && matrix.go_arch == 'arm64'
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: aarch64-unknown-linux-gnu

      - name: Install Rust target (darwin/arm64)
        if: matrix.go_os == 'darwin' && matrix.go_arch == 'arm64'
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: aarch64-apple-darwin

      - name: Install Rust target (windows/arm64)
        if: matrix.go_os == 'windows' && matrix.go_arch == 'arm64'
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: aarch64-pc-windows-msvc

      - uses: actions/setup-go@v5
        with:
          go-version-file: '${{ env.TSGO_SRC_PATH }}/go.mod'
          cache: true
          cache-dependency-path: '${{ env.TSGO_SRC_PATH }}/**/go.sum'

      - name: Install Node.js dependencies
        working-directory: ${{ env.TSGO_SRC_PATH }}
        run: npm ci

      - name: Build tsgo executable
        working-directory: ${{ env.TSGO_SRC_PATH }}
        run: npx hereby build

      - name: Create archive (Windows)
        if: matrix.go_os == 'windows'
        working-directory: ${{ env.TSGO_SRC_PATH }}/built/local
        run: |
          Compress-Archive -Path * -DestinationPath "tsgo-${{ matrix.asset_name_suffix }}.zip"
          echo "ASSET_PATH=$PWD/tsgo-${{ matrix.asset_name_suffix }}.zip" >> $env:GITHUB_ENV

      - name: Create archive (Unix)
        if: matrix.go_os != 'windows'
        working-directory: ${{ env.TSGO_SRC_PATH }}/built/local
        run: |
          tar -czf "tsgo-${{ matrix.asset_name_suffix }}.tar.gz" *
          echo "ASSET_PATH=${PWD}/tsgo-${{ matrix.asset_name_suffix }}.tar.gz" >> $GITHUB_ENV

      - uses: actions/upload-artifact@v4
        with:
          name: artifact-${{ matrix.asset_name_suffix }}
          path: ${{ env.ASSET_PATH }}
          retention-days: 7

  publish_release:
    name: Publish GitHub Release
    needs: [determine_release_vars, build_binaries]
    if: needs.determine_release_vars.outputs.changed == 'true' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4

      - name: Generate checksums
        run: |
          checksum_file="tsgo_${{ needs.determine_release_vars.outputs.tag_name }}_checksums.txt"
          : > "$checksum_file"
          for f in artifact-*/*.zip artifact-*/*.tar.gz; do
            [ -f "$f" ] || continue
            sum=$(sha256sum "$f" | awk '{print $1}')
            echo "$sum  $(basename "$f")" >> "$checksum_file"
          done

      - uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.determine_release_vars.outputs.tag_name }}
          name: ${{ needs.determine_release_vars.outputs.release_name }}
          body: |
            ${{ needs.determine_release_vars.outputs.release_name }}

            Build timestamp: ${{ needs.determine_release_vars.outputs.tag_name }}

            ## Contents
            These archives contain all files from the `built/local` directory, including the `tsgo` binary.

            ## Note
            This is an **unofficial nightly build** and may be unstable. Use at your own risk.
            Binaries are built directly from the official repository submodule without modification.
            The build workflow is available [here](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}).
          prerelease: true
          files: |
            artifact-*/*.zip
            artifact-*/*.tar.gz
            tsgo_*_checksums.txt