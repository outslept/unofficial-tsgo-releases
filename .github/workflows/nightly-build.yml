name: Build and Release tsgo Nightly from Submodule

on:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch: {}

permissions:
  contents: write

env:
  TSGO_SRC_PATH: tsgo_submodule

jobs:
  determine_release_vars:
    name: Determine Release Variables from Submodule
    runs-on: ubuntu-latest
    outputs:
      tag_name: ${{ steps.vars.outputs.tag_name }}
      release_name: ${{ steps.vars.outputs.release_name }}
      tsgo_commit_sha: ${{ steps.vars.outputs.tsgo_commit_sha }}
      tsgo_commit_sha_short: ${{ steps.vars.outputs.tsgo_commit_sha_short }}
      tsgo_commit_date: ${{ steps.vars.outputs.tsgo_commit_date }}
    steps:
      - uses: step-security/harden-runner@v2.12.0
        with:
          egress-policy: audit

      - uses: actions/checkout@v4.2.2
        with:
          submodules: 'recursive'
          fetch-depth: 0

      - name: Update submodule
        shell: bash
        run: |
          git submodule init
          git submodule update
          cd ${{ env.TSGO_SRC_PATH }}
          git fetch origin main
          git checkout main
          git pull origin main
          cd ..
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add ${{ env.TSGO_SRC_PATH }}
          if ! git diff --staged --quiet; then
            git commit -m "Update tsgo submodule to latest main"
            git push
          fi

      - name: Get commit information from submodule
        id: commit_info
        shell: bash
        working-directory: ${{ env.TSGO_SRC_PATH }}
        run: |
          echo "SHA=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
          echo "SHA_SHORT=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
          echo "DATE=$(git log -1 --format=%cs)" >> $GITHUB_OUTPUT

      - name: Set release variables
        id: vars
        shell: bash
        run: |
          TIMESTAMP=$(date -u '+%Y-%m-%dT%H:%M:%SZ')
          echo "tag_name=${{ steps.commit_info.outputs.DATE }}-${TIMESTAMP}" >> $GITHUB_OUTPUT
          echo "release_name=Nightly build ${TIMESTAMP} of TypeScript Go from microsoft/typescript-go@${{ steps.commit_info.outputs.SHA_SHORT }}" >> $GITHUB_OUTPUT
          echo "tsgo_commit_sha=${{ steps.commit_info.outputs.SHA }}" >> $GITHUB_OUTPUT
          echo "tsgo_commit_sha_short=${{ steps.commit_info.outputs.SHA_SHORT }}" >> $GITHUB_OUTPUT
          echo "tsgo_commit_date=${{ steps.commit_info.outputs.DATE }}" >> $GITHUB_OUTPUT

  build_binaries:
    name: Build tsgo Binary (${{ matrix.target_os }}/${{ matrix.target_arch }})
    needs: determine_release_vars
    strategy:
      fail-fast: false
      matrix:
        include:
          - target_os: ubuntu-latest
            target_arch: amd64
            go_os: linux
            go_arch: amd64
            asset_name_suffix: linux-amd64
            binary_name: tsgo
            archive_format: tar.gz
          - target_os: ubuntu-latest
            target_arch: arm64
            go_os: linux
            go_arch: arm64
            asset_name_suffix: linux-arm64
            binary_name: tsgo
            archive_format: tar.gz
          - target_os: windows-latest
            target_arch: amd64
            go_os: windows
            go_arch: amd64
            asset_name_suffix: windows-amd64
            binary_name: tsgo.exe
            archive_format: zip
          - target_os: windows-latest
            target_arch: arm64
            go_os: windows
            go_arch: arm64
            asset_name_suffix: windows-arm64
            binary_name: tsgo.exe
            archive_format: zip
          - target_os: macos-latest
            target_arch: amd64
            go_os: darwin
            go_arch: amd64
            asset_name_suffix: darwin-amd64
            binary_name: tsgo
            archive_format: tar.gz
          - target_os: macos-latest
            target_arch: arm64
            go_os: darwin
            go_arch: arm64
            asset_name_suffix: darwin-arm64
            binary_name: tsgo
            archive_format: tar.gz
          - target_os: ubuntu-latest
            target_arch: wasm
            go_os: js
            go_arch: wasm
            asset_name_suffix: js-wasm
            binary_name: tsgo.wasm
            archive_format: tar.gz
            env:
              CGO_ENABLED: 0

    runs-on: ${{ matrix.target_os }}
    env:
      GOOS: ${{ matrix.go_os }}
      GOARCH: ${{ matrix.go_arch }}
      CGO_ENABLED: ${{ matrix.env.CGO_ENABLED || 1 }}

    steps:
      - name: Enable long paths on Windows
        if: matrix.go_os == 'windows'
        shell: bash
        run: git config --global core.longpaths true

      - uses: step-security/harden-runner@v2.12.0
        with:
          egress-policy: audit

      - uses: actions/checkout@v4.2.2
        with:
          submodules: 'recursive'

      - uses: docker/setup-qemu-action@v3
        if: matrix.target_os == 'ubuntu-latest' && matrix.target_arch == 'arm64'

      - uses: actions/setup-node@v4.4.0
        with:
          node-version: 'lts/*'
          cache: 'npm'
          cache-dependency-path: '${{ env.TSGO_SRC_PATH }}/package-lock.json'

      - uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: ${{ (matrix.go_os == 'linux' && matrix.go_arch == 'arm64' && 'aarch64-unknown-linux-gnu') || (matrix.go_os == 'darwin' && matrix.go_arch == 'arm64' && 'aarch64-apple-darwin') || '' }}

      - uses: actions/setup-go@v5.5.0
        with:
          go-version: '>=1.24.0'
          cache: true
          cache-dependency-path: |
            ${{ env.TSGO_SRC_PATH }}/**/go.sum
            ${{ env.TSGO_SRC_PATH }}/**/go.mod

      - name: Install Node.js dependencies
        shell: bash
        working-directory: ${{ env.TSGO_SRC_PATH }}
        run: npm ci

      - name: Build tsgo executable
        shell: bash
        working-directory: ${{ env.TSGO_SRC_PATH }}
        run: npx hereby build

      - name: Prepare artifact for release (Windows zip)
        id: prepare_artifact_windows
        if: matrix.go_os == 'windows' && matrix.archive_format == 'zip'
        shell: pwsh
        run: |
          cd ${{ env.TSGO_SRC_PATH }}/built/local
          Compress-Archive -Path * -DestinationPath "tsgo-${{ matrix.asset_name_suffix }}.zip" -Force
          echo "ASSET_PATH=$(Resolve-Path -Path "tsgo-${{ matrix.asset_name_suffix }}.zip" | ForEach-Object {$_.Path})" >> $env:GITHUB_OUTPUT
          echo "ASSET_NAME=tsgo-${{ matrix.asset_name_suffix }}.zip" >> $env:GITHUB_OUTPUT

      - name: Prepare artifact for release (tar.gz)
        id: prepare_artifact_tar
        if: matrix.archive_format == 'tar.gz'
        shell: bash
        run: |
          cd ${{ env.TSGO_SRC_PATH }}/built/local
          tar -czvf "tsgo-${{ matrix.asset_name_suffix }}.tar.gz" *
          echo "ASSET_PATH=${PWD}/tsgo-${{ matrix.asset_name_suffix }}.tar.gz" >> $GITHUB_OUTPUT
          echo "ASSET_NAME=tsgo-${{ matrix.asset_name_suffix }}.tar.gz" >> $GITHUB_OUTPUT

      - uses: actions/upload-artifact@v4
        with:
          name: artifact-${{ matrix.asset_name_suffix }}
          path: ${{ (matrix.go_os == 'windows' && steps.prepare_artifact_windows.outputs.ASSET_PATH) || steps.prepare_artifact_tar.outputs.ASSET_PATH }}
          if-no-files-found: error

  publish_release:
    name: Publish GitHub Release
    needs: [determine_release_vars, build_binaries]
    runs-on: ubuntu-latest
    steps:
      - uses: step-security/harden-runner@v2.12.0
        with:
          egress-policy: audit

      - uses: actions/download-artifact@v4.3.0

      - name: Generate checksums
        shell: bash
        run: |
          checksum_file="tsgo-releases_${{ needs.determine_release_vars.outputs.tsgo_commit_date }}_checksums.txt"
          find artifact-* -type f \( -name "*.zip" -o -name "*.tar.gz" \) -print0 | while IFS= read -r -d $'\0' file; do
            sha256sum "$file" >> "$checksum_file"
          done

      - uses: softprops/action-gh-release@v2.2.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.determine_release_vars.outputs.tag_name }}
          name: ${{ needs.determine_release_vars.outputs.release_name }}
          body: |
            ${{ needs.determine_release_vars.outputs.release_name }}

            Build timestamp: ${{ needs.determine_release_vars.outputs.tag_name }}

            ## Contents
            These archives contain all files from the `built/local` directory, including the `tsgo` binary.

            ## Note
            This is an **unofficial nightly build** and may be unstable. Use at your own risk.
            Binaries are built directly from the official repository submodule without modification.
            The build workflow is available [here](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}).
          draft: false
          prerelease: true
          files: |
            artifact-*/*.zip
            artifact-*/*.tar.gz
            tsgo-releases_*_checksums.txt
          fail_on_unmatched_files: true
